# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DBASE_PASSWORD }}
          POSTGRES_DB: analyses-api
          POSTGRES_USER: root
        ports:
          - 5000:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Check out code into Go module directory
      uses: actions/checkout@v3

    - name: Install golang-migrate
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.2/migrate.linux-arm64.tar.gz | tar xvz
        sudo mv migrate /usr/bin/

    - name: Run migration
      run: |
        uname -a
        make mtest
        which migrate
        echo $DBASE_PASSWORD
        make migrateup
      env:
        DBASE_PASSWORD: ${{ secrets.DBASE_PASSWORD }}

    - name: Test
      run: make test
      env:
        TOKEN_SYMMETRIC_KEY: ${{ secrets.TOKEN_SYMMETRIC_KEY }}

