// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: files.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
    username,
    data
) VALUES (
    $1, $2
)
RETURNING id, username, data, changed_at, created_at
`

type CreateFileParams struct {
	Username string `json:"username"`
	Data     string `json:"data"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile, arg.Username, arg.Data)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Data,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
SELECT id, username, data, changed_at, created_at FROM files
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, username string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, username)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Data,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateFile = `-- name: UpdateFile :one
UPDATE files
SET data = $1
WHERE username = $2
RETURNING id, username, data, changed_at, created_at
`

type UpdateFileParams struct {
	Data     string `json:"data"`
	Username string `json:"username"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, updateFile, arg.Data, arg.Username)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Data,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
